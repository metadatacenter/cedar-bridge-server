package org.metadatacenter.cedar.bridge.resource;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import static org.metadatacenter.cedar.bridge.resource.Cedar.*;
import static org.metadatacenter.cedar.bridge.resource.Cedar.MetadataInstance.*;

/**
 * Matthew Horridge
 * Stanford Center for Biomedical Informatics Research
 * 2023-08-07
 */
public class Example {

  public MetadataInstance parse(ObjectMapper mapper, String json) throws IOException {
    return mapper.readerFor(MetadataInstance.class)
        .readValue(json);
  }

  public MetadataInstance get() {
    var now = Instant.ofEpochSecond(System.currentTimeMillis() / 1000);
//    DescriptionElementElement descriptionElement = new DescriptionElementElement("the description id", DescriptionField.of(), DescriptionTypeField.of());
//    descriptionElementElementList.add(descriptionElement);

    return new MetadataInstance(
        "TheId",
        "The name",
        "The description",
        "<Insert template IRI here>",
        now,
        "Created by",
        now,
        "Modified by",
        "Derived from",
        PrefixField.of("the prefix"),
        UrlField.of("url"),
        CreatorElementList.of(
            new CreatorElement(generateId(),
                CreatorElement.CreatorNameField.of("John Doe"),
                CreatorElement.NameTypeField.of("???", "Person"),
                CreatorElement.GivenNameField.of("John"),
                CreatorElement.FamilyNameField.of(null),
                CreatorElement.AffiliationElementList.of(
                    new CreatorElement.AffiliationElement(generateId(),
                        CreatorElement.AffiliationElement.NameField.of(),
                        CreatorElement.AffiliationElement.AffiliationIdentifierField.of(),
                        CreatorElement.AffiliationElement.AffiliationIdentifierSchemeField.of(),
                        CreatorElement.AffiliationElement.SchemeUriField.of())
                ),
                CreatorElement.NameIdentifierElementList.of())
        ),
        TitleElementList.of(
            new TitleElement(generateId(),
                TitleElement.TitleField2.of("This is an example"),
                TitleElement.TitleTypeField.of())
        ),
        PublicationYearField.of("2023-01-01"),
        PublisherField.of(),
        ResourceTypeField.of("template"),
        SubjectElementList.of(),
        ContributorElementList.of(),
        DateElementList.of(new DateElement(
            generateId(),
            DateElement.DateField2.of(),
            DateElement.DateTypeField.of(),
            DateElement.DateInformationField.of()
        )),
        LanguageField.of(),
        AlternateIdentifierElementList.of(),
        RelatedIdentifierElementList.of(),
        SizeFieldList.of(),
        FormatFieldList.of(),
        VersionField.of(),
        RightsElementList.of(),
        DescriptionElementList.of(),
        GeoLocationElementList.of(new GeoLocationElement(generateId(),
            GeoLocationElement.GeoLocationPlaceField.of("p1"),
            new GeoLocationElement.GeoLocationPointElement(
                generateId(),
                GeoLocationElement.GeoLocationPointElement.PointLongitudeField.of(),
                GeoLocationElement.GeoLocationPointElement.PointLatitudeField.of("50")),
                GeoLocationElement.GeoLocationBoxElement.of())),
        FundingReferenceElementList.of(),
        RelatedItemElementList.of());
  }

  public static void main(String[] args) throws IOException {
//    System.out.println("current path: " + System.getProperty("user.dir"));
    var pth = Path.of("../cedar-bridge-server/cedar-bridge-server-application/src/test/resources/TestJsonFiles/NewVersionTemplateInstanceTest.json");
    var s = Files.readString(pth);
    var ex = new Example();
    var mapper = new ObjectMapper();
    mapper.registerModule(new JavaTimeModule());
    mapper.enable(SerializationFeature.INDENT_OUTPUT);
    MetadataInstance instance = ex.parse(mapper, s);
    System.out.println(mapper.writeValueAsString(instance));

//    MetadataInstance autoGeneratedInstance = ex.get();
//    String jsonOutput = mapper.writeValueAsString(autoGeneratedInstance);
//    System.out.println(jsonOutput);
//
//    MetadataInstance instance = ex.parse(mapper, jsonOutput);

//    MetadataInstance instance = ex.get();

//    String creatorName = instance.creator().creatorList().get(0).creatorName().value();
//    String jsonOutput = mapper.writeValueAsString(instance);
//    System.out.println(jsonOutput);
//
//    System.out.println(instance.prefix().value());
  }
}
